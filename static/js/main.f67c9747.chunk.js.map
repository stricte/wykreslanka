{"version":3,"sources":["utils.js","App.js","reportWebVitals.js","index.js"],"names":["initGrid","m","n","Array","map","e","fill","dirs","right","left","up","down","rightdown","rightup","leftdown","leftup","randomWord","words","sort","Math","random","slice","wordCords","startCords","direction","word","wordLen","length","cords","reduce","dir","moveCursor","currentCords","placeWordOnGrid","grid","forEach","index","value","charAt","updateGridAt","newGrid","cloneGrid","validateWordCords","i","cordsOutsideGrid","positionTaken","currentValue","valueAt","row","randomDir","keys","Object","floor","randomCords","min","max","fillGrid","j","String","fromCharCode","isMobile","window","matchMedia","matches","placedWords","JSON","parse","localStorage","getItem","placedWordsCords","wordsCount","wordsDict","includes","initialCords","push","generate","setItem","stringify","App","useState","start","setStart","stop","setStop","selectedCords","setSelectedCords","selectionMode","setSelectionMode","markedWords","setMarkedWords","markedCords","setMarkedCords","useEffect","wordMarkedIndex","useCallback","markedIndex","selectedKey","concat","join","placedWordCords","useLayoutEffect","x0","y0","x1","y1","dx","abs","sx","dy","sy","err","e2","lineCords","markedWordIndex","prev","cellMarked","find","dummyListener","preventDefault","className","onClick","clear","location","reload","cell","ii","classNames","selected","marked","data-x","data-y","onMouseDown","x","y","onMouseUp","onMouseOver","onTouchStart","document","addEventListener","onTouchEnd","removeEventListener","onTouchMove","touch","touches","elementFromPoint","clientX","clientY","dataset","parseInt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f67c9747.chunk.js","sourcesContent":["import wordsDict from \"./words.json\";\n\nexport const lineCords = (start, stop) => {\n  let [x0, y0] = start;\n  let [x1, y1] = stop;\n\n  const cords = [];\n\n  const dx = Math.abs(x1 - x0),\n    sx = x0 < x1 ? 1 : -1;\n  const dy = Math.abs(y1 - y0),\n    sy = y0 < y1 ? 1 : -1;\n\n  let err = (dx > dy ? dx : -dy) / 2;\n\n  while (true) {\n    cords.push([x0, y0]);\n\n    if (x0 === x1 && y0 === y1) break;\n\n    const e2 = err;\n\n    if (e2 > -dx) {\n      err -= dy;\n      x0 += sx;\n    }\n    if (e2 < dy) {\n      err += dx;\n      y0 += sy;\n    }\n  }\n\n  return cords;\n};\n\nconst initGrid = (m, n) => {\n  return [...Array(m)].map((e) => Array(n).fill(null));\n};\n\nconst dirs = {\n  right: [0, 1],\n  left: [0, -1],\n  up: [-1, 0],\n  down: [1, 0],\n  rightdown: [1, 1],\n  rightup: [-1, 1],\n  leftdown: [1, -1],\n  leftup: [-1, -1],\n};\n\nconst randomWord = (words) =>\n  words.sort(() => Math.random() - Math.random()).slice(0, 1)[0];\n\nconst wordCords = (startCords, direction, word) => {\n  const wordLen = word.length;\n  const cords = [startCords];\n\n  return Array(wordLen - 1)\n    .fill(direction)\n    .reduce(\n      (cords, dir) => [...cords, moveCursor(cords.slice(-1)[0], dir)],\n      cords\n    );\n};\n\nconst moveCursor = (currentCords, direction) => {\n  return [currentCords[0] + direction[0], currentCords[1] + direction[1]];\n};\n\nconst placeWordOnGrid = (word, wordCords, grid) => {\n  wordCords.forEach((cords, index) => {\n    const value = word.charAt(index);\n    grid = updateGridAt(cords, value, grid);\n  });\n\n  return grid;\n};\n\nconst updateGridAt = (cords, value, grid) => {\n  const newGrid = cloneGrid(grid);\n  newGrid[cords[0]][cords[1]] = value;\n\n  return newGrid;\n};\n\nconst validateWordCords = (word, wordCords, grid) => {\n  for (let i = 0; i < wordCords.length; i++) {\n    const value = word.charAt(i);\n    const cords = wordCords[i];\n\n    if (cordsOutsideGrid(cords, grid)) return false;\n    if (positionTaken(cords, value, grid)) return false;\n  }\n  return true;\n};\n\nconst cordsOutsideGrid = (cords, grid) => {\n  if (cords[0] < 0 || cords[0] > grid.length - 1) return true;\n  if (cords[1] < 0 || cords[1] > grid[0].length - 1) return true;\n\n  return false;\n};\n\nconst positionTaken = (cords, value, grid) => {\n  const currentValue = valueAt(cords, grid);\n  return !!currentValue && currentValue !== value;\n};\n\nconst valueAt = (cords, grid) => {\n  return grid[cords[0]][cords[1]];\n};\n\nconst cloneGrid = (grid) => {\n  return grid.map((row) => [...row]);\n};\n\nconst randomDir = (dirs) => {\n  const keys = Object.keys(dirs);\n  const key = keys[Math.floor(Math.random() * keys.length)];\n\n  return dirs[key];\n};\n\nconst randomCords = (m, n) => {\n  const random = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\n  return [random(0, m), random(0, n)];\n};\n\nconst randomValue = () =>\n  String.fromCharCode(65 + Math.floor(Math.random() * 26));\n\nconst fillGrid = (grid) => {\n  grid = cloneGrid(grid);\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (!grid[i][j]) {\n        grid[i][j] = randomValue();\n      }\n    }\n  }\n\n  return grid;\n};\n\nexport const generate = (m = 10, n = 10, wordsCount = 10) => {\n  let grid = initGrid(m, n);\n  let placedWords = [];\n  let placedWordsCords = [];\n\n  while (placedWords.length < wordsCount) {\n    const word = randomWord(wordsDict);\n\n    if (placedWords.includes(word)) continue;\n\n    const direction = randomDir(dirs);\n    const initialCords = randomCords(m, n);\n\n    const cords = wordCords(initialCords, direction, word);\n\n    if (validateWordCords(word, cords, grid)) {\n      grid = placeWordOnGrid(word, cords, grid);\n\n      placedWords.push(word);\n      placedWordsCords.push(cords);\n    }\n  }\n\n  grid = fillGrid(grid);\n\n  return [placedWords, grid, placedWordsCords];\n};\n\nexport const isMobile = () =>\n  window.matchMedia(\"(hover: none) and (pointer: coarse)\").matches;\n","import React, {\n  useState,\n  useLayoutEffect,\n  useCallback,\n  useEffect,\n} from \"react\";\nimport classNames from \"classnames\";\n\nimport \"./App.css\";\nimport { generate, lineCords, isMobile } from \"./utils\";\n\nlet placedWords = JSON.parse(window.localStorage.getItem(\"placedWords\"));\nlet grid = JSON.parse(window.localStorage.getItem(\"grid\"));\nlet placedWordsCords = JSON.parse(\n  window.localStorage.getItem(\"placedWordsCords\")\n);\n\nif (!placedWordsCords || !grid || !placedWordsCords) {\n  [placedWords, grid, placedWordsCords] = generate();\n\n  window.localStorage.setItem(\"placedWords\", JSON.stringify(placedWords));\n  window.localStorage.setItem(\"grid\", JSON.stringify(grid));\n  window.localStorage.setItem(\n    \"placedWordsCords\",\n    JSON.stringify(placedWordsCords)\n  );\n}\n\nfunction App() {\n  const [start, setStart] = useState();\n  const [stop, setStop] = useState();\n\n  const [selectedCords, setSelectedCords] = useState();\n  const [selectionMode, setSelectionMode] = useState(false);\n\n  const [markedWords, setMarkedWords] = useState(\n    JSON.parse(window.localStorage.getItem(\"markedWords\") || \"[]\")\n  );\n  const [markedCords, setMarkedCords] = useState(\n    JSON.parse(window.localStorage.getItem(\"markedCords\") || \"[]\")\n  );\n\n  useEffect(() => {\n    window.localStorage.setItem(\"markedWords\", JSON.stringify(markedWords));\n    window.localStorage.setItem(\"markedCords\", JSON.stringify(markedCords));\n  }, [markedWords, markedCords]);\n\n  const onMouseDown = (x, y) => {\n    setSelectionMode(true);\n    setStart([x, y]);\n    setStop([x, y]);\n  };\n\n  const onMouseUp = (x, y) => {\n    setStop([x, y]);\n    setSelectionMode(false);\n  };\n\n  const onMouseOver = (x, y) => {\n    if (!selectionMode) return;\n    setStop([x, y]);\n  };\n\n  const wordMarkedIndex = useCallback(() => {\n    let markedIndex = -1;\n    const selectedKey = [].concat(...selectedCords).join(\"\");\n\n    placedWordsCords.forEach((placedWordCords, index) => {\n      const placedKey = [].concat(...placedWordCords).join(\"\");\n\n      if (placedKey === selectedKey) markedIndex = index;\n    });\n\n    return markedIndex;\n  }, [selectedCords]);\n\n  useLayoutEffect(() => {\n    if (!start) return;\n    if (!stop) return;\n\n    setSelectedCords(lineCords(start, stop));\n  }, [start, stop]);\n\n  useLayoutEffect(() => {\n    if (selectionMode) return;\n    if (!selectedCords) return;\n\n    const markedWordIndex = wordMarkedIndex();\n\n    if (markedWordIndex > -1) {\n      setMarkedWords((prev) => [...prev, markedWordIndex]);\n      setMarkedCords((prev) => [...prev, ...selectedCords]);\n    } else {\n    }\n\n    setSelectedCords();\n    setStart();\n    setStop();\n  }, [selectionMode, selectedCords, wordMarkedIndex]);\n\n  const cellMarked = (cords) => {\n    if (!markedCords) return false;\n\n    return markedCords.find(\n      (markedCords) =>\n        markedCords[0] === cords[0] && markedCords[1] === cords[1]\n    );\n  };\n\n  const cellSelected = (cords) => {\n    if (!selectedCords) return false;\n\n    return selectedCords.find(\n      (selectedCords) =>\n        selectedCords[0] === cords[0] && selectedCords[1] === cords[1]\n    );\n  };\n\n  const resetGame = () => {\n    window.localStorage.clear();\n    window.location.reload();\n  };\n\n  const dummyListener = (e) => e.preventDefault();\n\n  const onTouchStart = (x, y) => {\n    document.addEventListener(\"touchstart\", dummyListener);\n\n    setSelectionMode(true);\n    setStart([x, y]);\n    setStop([x, y]);\n  };\n\n  const onTouchEnd = () => {\n    document.removeEventListener(\"touchstart\", dummyListener);\n\n    setSelectionMode(false);\n  };\n\n  const onTouchMove = (e) => {\n    if (!selectionMode) return;\n\n    const touch = e.touches[0];\n    if (!touch) return;\n\n    const {\n      dataset: { x, y },\n    } = document.elementFromPoint(touch.clientX, touch.clientY);\n\n    const cords = [parseInt(x), parseInt(y)];\n\n    setStop((prev) => {\n      if (prev && prev.join(\"\") === cords.join(\"\")) return null;\n      else return cords;\n    });\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"grid\">\n          <div className=\"toolbar\">\n            <button onClick={resetGame}>Reset</button>\n          </div>\n          {grid.map((row, i) => (\n            <div className=\"row\" key={`row-${i}`}>\n              {row.map((cell, ii) => (\n                <div\n                  className={classNames(\"cell\", {\n                    selected: cellSelected([i, ii]),\n                    marked: cellMarked([i, ii]),\n                  })}\n                  data-x={i}\n                  data-y={ii}\n                  key={`cell-${ii}`}\n                  onMouseDown={() => !isMobile() && onMouseDown(i, ii)}\n                  onMouseUp={() => !isMobile() && onMouseUp(i, ii)}\n                  onMouseOver={() => !isMobile() && onMouseOver(i, ii)}\n                  onTouchStart={(e) => isMobile() && onTouchStart(i, ii)}\n                  onTouchEnd={() => isMobile() && onTouchEnd()}\n                  onTouchMove={(e) => isMobile() && onTouchMove(e)}\n                >\n                  {cell}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n\n        <div className=\"wordList\">\n          {placedWords.map((word, i) => (\n            <div\n              className={classNames(\"word\", {\n                marked: markedWords.includes(i),\n              })}\n              key={`word-${i}`}\n            >\n              {word}\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}